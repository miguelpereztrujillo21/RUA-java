<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/mpt/rua_java/data/remote/dto/RandomUserDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/mpt/rua_java/data/remote/dto/RandomUserDto.java" />
              <option name="originalContent" value="package com.mpt.rua_java.data.remote.dto;&#10;&#10;import com.google.gson.annotations.SerializedName;&#10;import java.util.List;&#10;&#10;/**&#10; * DTO principal para la respuesta de la API RandomUser&#10; * Mapea directamente la estructura JSON según documentación oficial&#10; * https://randomuser.me/documentation&#10; */&#10;public class RandomUserResponseDto {&#10;    @SerializedName(&quot;results&quot;)&#10;    private List&lt;UserDto&gt; results;&#10;    &#10;    @SerializedName(&quot;info&quot;)&#10;    private InfoDto info;&#10;&#10;    public List&lt;UserDto&gt; getResults() { return results; }&#10;    public InfoDto getInfo() { return info; }&#10;}&#10;" />
              <option name="updatedContent" value="package com.mpt.rua_java.data.remote.dto;&#10;&#10;import com.google.gson.annotations.SerializedName;&#10;import java.util.List;&#10;&#10;/**&#10; * DTO principal para la respuesta de la API RandomUser&#10; * Mapea directamente la estructura JSON según documentación oficial&#10; * https://randomuser.me/documentation&#10; */&#10;public class RandomUserResponseDto {&#10;    @SerializedName(&quot;results&quot;)&#10;    private List&lt;UserDto&gt; results;&#10;    &#10;    @SerializedName(&quot;info&quot;)&#10;    private InfoDto info;&#10;&#10;    public List&lt;UserDto&gt; getResults() { return results; }&#10;    public InfoDto getInfo() { return info; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/mpt/rua_java/domain/entity/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/mpt/rua_java/domain/entity/User.kt" />
              <option name="updatedContent" value="package com.mpt.rua_java.domain.entity&#10;&#10;/**&#10; * Entidad de dominio que representa un usuario&#10; * Esta clase es el núcleo del negocio y no tiene dependencias externas&#10; */&#10;data class User(&#10;    val id: String,&#10;    val gender: String,&#10;    val name: Name,&#10;    val location: Location,&#10;    val email: String,&#10;    val login: Login,&#10;    val dob: DateOfBirth,&#10;    val registered: Registered,&#10;    val phone: String,&#10;    val cell: String,&#10;    val picture: Picture,&#10;    val nat: String,&#10;    val isAddedToContacts: Boolean = false&#10;) {&#10;    fun getFullName(): String = &quot;${name.title} ${name.first} ${name.last}&quot;&#10;    &#10;    fun getFullAddress(): String = with(location) {&#10;        &quot;${street.number} ${street.name}, ${city}, ${state}, ${country} ${postcode}&quot;&#10;    }&#10;    &#10;    fun getVCardData(): String {&#10;        return &quot;&quot;&quot;&#10;            BEGIN:VCARD&#10;            VERSION:3.0&#10;            FN:${getFullName()}&#10;            N:${name.last};${name.first};;${name.title};&#10;            EMAIL:$email&#10;            TEL;TYPE=CELL:$cell&#10;            TEL;TYPE=VOICE:$phone&#10;            ADR;TYPE=HOME:;;${location.street.number} ${location.street.name};${location.city};${location.state};${location.postcode};${location.country}&#10;            BDAY:${dob.date.take(10)}&#10;            GENDER:${gender.uppercase()}&#10;            END:VCARD&#10;        &quot;&quot;&quot;.trimIndent()&#10;    }&#10;}&#10;&#10;data class Name(&#10;    val title: String,&#10;    val first: String,&#10;    val last: String&#10;)&#10;&#10;data class Location(&#10;    val street: Street,&#10;    val city: String,&#10;    val state: String,&#10;    val country: String,&#10;    val postcode: String,&#10;    val coordinates: Coordinates,&#10;    val timezone: Timezone&#10;)&#10;&#10;data class Street(&#10;    val number: Int,&#10;    val name: String&#10;)&#10;&#10;data class Coordinates(&#10;    val latitude: String,&#10;    val longitude: String&#10;)&#10;&#10;data class Timezone(&#10;    val offset: String,&#10;    val description: String&#10;)&#10;&#10;data class Login(&#10;    val uuid: String,&#10;    val username: String,&#10;    val password: String,&#10;    val salt: String,&#10;    val md5: String,&#10;    val sha1: String,&#10;    val sha256: String&#10;)&#10;&#10;data class DateOfBirth(&#10;    val date: String,&#10;    val age: Int&#10;)&#10;&#10;data class Registered(&#10;    val date: String,&#10;    val age: Int&#10;)&#10;&#10;data class Picture(&#10;    val large: String,&#10;    val medium: String,&#10;    val thumbnail: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/mpt/rua_java/presentation/viewmodel/MainViewModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/mpt/rua_java/presentation/viewmodel/MainViewModel.java" />
              <option name="updatedContent" value="package com.mpt.rua_java.presentation.viewmodel;&#10;&#10;import androidx.lifecycle.LiveData;&#10;import androidx.lifecycle.MutableLiveData;&#10;import androidx.lifecycle.ViewModel;&#10;import com.mpt.rua_java.domain.entity.User;&#10;import com.mpt.rua_java.domain.usecase.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.concurrent.CompletableFuture;&#10;import javax.inject.Inject;&#10;import dagger.hilt.android.lifecycle.HiltViewModel;&#10;&#10;/**&#10; * ViewModel principal para la MainActivity&#10; * Maneja el estado de la UI y coordina los casos de uso del dominio&#10; * No contiene lógica de negocio, solo orquesta los casos de uso&#10; */&#10;@HiltViewModel&#10;public class MainViewModel extends ViewModel {&#10;&#10;    private final GetRandomUsersUseCase getRandomUsersUseCase;&#10;    private final SaveUsersUseCase saveUsersUseCase;&#10;    private final GetAllUsersUseCase getAllUsersUseCase;&#10;    private final AddUserToContactsUseCase addUserToContactsUseCase;&#10;    private final GetContactsUseCase getContactsUseCase;&#10;    private final SearchUsersUseCase searchUsersUseCase;&#10;&#10;    // LiveData para observar cambios en la UI&#10;    private final MutableLiveData&lt;List&lt;User&gt;&gt; _users = new MutableLiveData&lt;&gt;();&#10;    public LiveData&lt;List&lt;User&gt;&gt; users = _users;&#10;&#10;    private final MutableLiveData&lt;Boolean&gt; _loading = new MutableLiveData&lt;&gt;();&#10;    public LiveData&lt;Boolean&gt; loading = _loading;&#10;&#10;    private final MutableLiveData&lt;String&gt; _error = new MutableLiveData&lt;&gt;();&#10;    public LiveData&lt;String&gt; error = _error;&#10;&#10;    private final MutableLiveData&lt;Boolean&gt; _dataLoadedSuccessfully = new MutableLiveData&lt;&gt;();&#10;    public LiveData&lt;Boolean&gt; dataLoadedSuccessfully = _dataLoadedSuccessfully;&#10;&#10;    // LiveData específico para mostrar si estamos en modo &quot;ver contactos&quot;&#10;    private final MutableLiveData&lt;Boolean&gt; _showingContacts = new MutableLiveData&lt;&gt;(false);&#10;    public LiveData&lt;Boolean&gt; showingContacts = _showingContacts;&#10;&#10;    @Inject&#10;    public MainViewModel(&#10;        GetRandomUsersUseCase getRandomUsersUseCase,&#10;        SaveUsersUseCase saveUsersUseCase,&#10;        GetAllUsersUseCase getAllUsersUseCase,&#10;        AddUserToContactsUseCase addUserToContactsUseCase,&#10;        GetContactsUseCase getContactsUseCase,&#10;        SearchUsersUseCase searchUsersUseCase&#10;    ) {&#10;        this.getRandomUsersUseCase = getRandomUsersUseCase;&#10;        this.saveUsersUseCase = saveUsersUseCase;&#10;        this.getAllUsersUseCase = getAllUsersUseCase;&#10;        this.addUserToContactsUseCase = addUserToContactsUseCase;&#10;        this.getContactsUseCase = getContactsUseCase;&#10;        this.searchUsersUseCase = searchUsersUseCase;&#10;    }&#10;&#10;    /**&#10;     * Carga 100 usuarios de la API RandomUser y los guarda localmente&#10;     * Implementa el requisito: &quot;desarrolla una manera de almacenar 100 resultados&quot;&#10;     */&#10;    public void loadRandomUsers() {&#10;        _loading.setValue(true);&#10;        _error.setValue(null);&#10;&#10;        getRandomUsersUseCase.execute()&#10;            .thenCompose(users -&gt; {&#10;                // Guardar usuarios en base de datos local&#10;                return saveUsersUseCase.execute(users)&#10;                    .thenApply(v -&gt; users); // Retornar los usuarios después de guardar&#10;            })&#10;            .thenAccept(users -&gt; {&#10;                _users.postValue(users);&#10;                _loading.postValue(false);&#10;                _dataLoadedSuccessfully.postValue(true);&#10;            })&#10;            .exceptionally(throwable -&gt; {&#10;                _error.postValue(&quot;Error al cargar usuarios: &quot; + throwable.getMessage());&#10;                _loading.postValue(false);&#10;                _dataLoadedSuccessfully.postValue(false);&#10;                return null;&#10;            });&#10;    }&#10;&#10;    /**&#10;     * Carga usuarios almacenados localmente&#10;     */&#10;    public void loadLocalUsers() {&#10;        _loading.setValue(true);&#10;&#10;        getAllUsersUseCase.execute()&#10;            .thenAccept(users -&gt; {&#10;                _users.postValue(users);&#10;                _loading.postValue(false);&#10;            })&#10;            .exceptionally(throwable -&gt; {&#10;                _error.postValue(&quot;Error al cargar usuarios locales: &quot; + throwable.getMessage());&#10;                _loading.postValue(false);&#10;                return null;&#10;            });&#10;    }&#10;&#10;    /**&#10;     * Agrega un usuario a la agenda de contactos&#10;     * Implementa el requisito: &quot;añadir a la agenda de contactos&quot;&#10;     */&#10;    public void addToContacts(String userId) {&#10;        System.out.println(&quot;DEBUG: Agregando usuario a contactos: &quot; + userId);&#10;        addUserToContactsUseCase.execute(userId)&#10;            .thenRun(() -&gt; {&#10;                System.out.println(&quot;DEBUG: Usuario agregado exitosamente, recargando lista&quot;);&#10;                // Recargar la lista para mostrar el cambio&#10;                if (_showingContacts.getValue() != null &amp;&amp; _showingContacts.getValue()) {&#10;                    loadContacts(); // Si estamos viendo contactos, recargar contactos&#10;                } else {&#10;                    loadLocalUsers(); // Si no, recargar todos los usuarios&#10;                }&#10;            })&#10;            .exceptionally(throwable -&gt; {&#10;                System.out.println(&quot;DEBUG: Error al agregar a contactos: &quot; + throwable.getMessage());&#10;                _error.postValue(&quot;Error al agregar a contactos: &quot; + throwable.getMessage());&#10;                return null;&#10;            });&#10;    }&#10;&#10;    /**&#10;     * Consulta y muestra solo los usuarios que están en la agenda de contactos&#10;     * Nueva funcionalidad para consultar la agenda&#10;     */&#10;    public void loadContacts() {&#10;        _loading.postValue(true);&#10;        _showingContacts.postValue(true);&#10;&#10;        getContactsUseCase.execute()&#10;            .thenAccept(contacts -&gt; {&#10;                // Agregar logs para depuración&#10;                System.out.println(&quot;DEBUG: Contactos obtenidos: &quot; + contacts.size());&#10;                for (User contact : contacts) {&#10;                    System.out.println(&quot;DEBUG: Contacto - &quot; + contact.getFullName() + &quot; - isAddedToContacts: &quot; + contact.isAddedToContacts());&#10;                }&#10;&#10;                // Asegurar que solo se muestren los contactos&#10;                if (contacts.isEmpty()) {&#10;                    _users.postValue(new ArrayList&lt;&gt;());&#10;                } else {&#10;                    _users.postValue(new ArrayList&lt;&gt;(contacts)); // Crear nueva lista para forzar actualización&#10;                }&#10;                _loading.postValue(false);&#10;            })&#10;            .exceptionally(throwable -&gt; {&#10;                System.out.println(&quot;DEBUG: Error al cargar contactos: &quot; + throwable.getMessage());&#10;                throwable.printStackTrace();&#10;                _error.postValue(&quot;Error al cargar contactos: &quot; + throwable.getMessage());&#10;                _loading.postValue(false);&#10;                return null;&#10;            });&#10;    }&#10;&#10;    /**&#10;     * Vuelve a mostrar todos los usuarios (salir del modo contactos)&#10;     */&#10;    public void showAllUsers() {&#10;        _showingContacts.postValue(false);&#10;        loadLocalUsers();&#10;    }&#10;&#10;    /**&#10;     * Busca usuarios por nombre&#10;     */&#10;    public void searchUsers(String query) {&#10;        if (query == null || query.trim().isEmpty()) {&#10;            loadLocalUsers();&#10;            return;&#10;        }&#10;&#10;        _loading.setValue(true);&#10;&#10;        searchUsersUseCase.execute(query)&#10;            .thenAccept(users -&gt; {&#10;                _users.postValue(users);&#10;                _loading.postValue(false);&#10;            })&#10;            .exceptionally(throwable -&gt; {&#10;                _error.postValue(&quot;Error en la búsqueda: &quot; + throwable.getMessage());&#10;                _loading.postValue(false);&#10;                return null;&#10;            });&#10;    }&#10;&#10;    /**&#10;     * Limpia el estado de error&#10;     */&#10;    public void clearError() {&#10;        _error.setValue(null);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>